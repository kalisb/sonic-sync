/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sonic.sync.core.libtorrent.swig;

public class stats_metric {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected stats_metric(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(stats_metric obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_stats_metric(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setValue_index(int value) {
    libtorrent_jni.stats_metric_value_index_set(swigCPtr, this, value);
  }

  public int getValue_index() {
    return libtorrent_jni.stats_metric_value_index_get(swigCPtr, this);
  }

  public void setType(stats_metric.metric_type_t value) {
    libtorrent_jni.stats_metric_type_set(swigCPtr, this, value.swigValue());
  }

  public stats_metric.metric_type_t getType() {
    return stats_metric.metric_type_t.swigToEnum(libtorrent_jni.stats_metric_type_get(swigCPtr, this));
  }

  public String get_name() {
    return libtorrent_jni.stats_metric_get_name(swigCPtr, this);
  }

  public stats_metric() {
    this(libtorrent_jni.new_stats_metric(), true);
  }

  public final static class metric_type_t {
    public final static stats_metric.metric_type_t type_counter = new stats_metric.metric_type_t("type_counter");
    public final static stats_metric.metric_type_t type_gauge = new stats_metric.metric_type_t("type_gauge");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static metric_type_t swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + metric_type_t.class + " with value " + swigValue);
    }

    private metric_type_t(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private metric_type_t(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private metric_type_t(String swigName, metric_type_t swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static metric_type_t[] swigValues = { type_counter, type_gauge };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
